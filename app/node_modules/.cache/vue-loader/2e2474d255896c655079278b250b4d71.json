{"remainingRequest":"/Users/eric/Desktop/projects/covidproject/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eric/Desktop/projects/covidproject/app/src/components/Main.vue?vue&type=style&index=0&id=54d3a52e&scoped=true&lang=css&","dependencies":[{"path":"/Users/eric/Desktop/projects/covidproject/app/src/components/Main.vue","mtime":1595297197143},{"path":"/Users/eric/Desktop/projects/covidproject/app/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eric/Desktop/projects/covidproject/app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/eric/Desktop/projects/covidproject/app/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/eric/Desktop/projects/covidproject/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eric/Desktop/projects/covidproject/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWFpbi1jb250YWluZXIgewogICAgaGVpZ2h0OiAxMDAlOwp9CgoudGFibGUtY2FyZCB7CiAgICB3aWR0aDogMTAwJTsKICAgIG92ZXJmbG93OiBhdXRvOwp9Ci50YWJsZS1jYXJkLXRpdGxlIHsKICAgIG1hcmdpbi10b3A6IC0ycmVtICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["Main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Main.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container fluid class=\"main-container\">\n        <v-snackbar\n            v-model=\"snackbar\"\n            timeout=\"4000\"\n            top\n            right\n            multi-line\n            :color=\"snackbarColor\"\n        >\n            <v-icon color=\"white\" class=\"mr-2\">\n                mdi-comment-alert-outline\n            </v-icon>\n            {{ snackbarText }}\n        </v-snackbar>\n        <v-row align=\"center\" justify=\"center\">\n            <v-col cols=\"10\">\n                <v-file-input\n                    show-size\n                    small-chips\n                    multiple\n                    accept=\".xml\"\n                    label=\"XML file input\"\n                    v-model=\"files\"\n                />\n            </v-col>\n            <v-btn\n                color=\"primary\"\n                text\n                @click=\"upload()\"\n                :disabled=\"files.length === 0\"\n            >\n                upload\n            </v-btn>\n        </v-row>\n        <v-row align=\"center\" justify=\"center\">\n            <v-card class=\"table-card mb-10 mx-10\">\n                <v-card-title class=\"mx-5\">\n                    <v-row>\n                        <v-col cols=\"4\">\n                            <span>\n                                {{\n                                    selectedCat !== \"\"\n                                        ? selectedCat\n                                        : \"no catalog selected\"\n                                }}\n                            </span>\n                        </v-col>\n                        <v-col cols=\"3\">\n                            <v-select\n                                v-model=\"selectedCat\"\n                                :items=\"catalogs\"\n                                label=\"Catalog\"\n                                @change=\"selectChange()\"\n                            />\n                        </v-col>\n                        <v-col>\n                            <v-text-field\n                                v-model=\"search\"\n                                :disabled=\"selectedCat === ''\"\n                                append-icon=\"mdi-magnify\"\n                                label=\"Search\"\n                                single-line\n                                hide-details\n                            />\n                        </v-col>\n                    </v-row>\n                </v-card-title>\n                <v-data-table\n                    :headers=\"headers\"\n                    :items=\"data\"\n                    :search=\"search\"\n                ></v-data-table>\n            </v-card>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n    name: \"Main\",\n    data: () => ({\n        // snack bar\n        snackbar: false,\n        snackbarText: \"\",\n        snackbarColor: \"success\",\n        // actual data\n        files: [],\n        originalData: {}, // original data from server\n        processedData: {}, // keys are strings\n        catalogs: [],\n        // table data\n        headers: [],\n        data: [],\n        // search\n        search: \"\",\n        // selected\n        selectedCat: \"\",\n    }),\n    methods: {\n        async upload() {\n            // reset data\n            this.processedData = {}; // keys are strings\n            this.catalogs = [];\n            this.selectedCat = \"\";\n            this.reset();\n\n            let formData = new FormData();\n            formData.append(\"file\", this.files[0]);\n\n            axios\n                .post(\"http://localhost:8080/api/convert/xml/\", formData)\n                .then(async (response) => {\n                    this.originalData = JSON.parse(response.data.data);\n\n                    try {\n                        let res = await this.getCatalogs();\n\n                        if (res === 200) {\n                            res = await this.getData(this.selectedCat);\n\n                            this.showSnackbar(\n                                `${this.selectedCat} data successfully loaded`,\n                                \"success\"\n                            );\n                        }\n                    } catch (err) {\n                        this.showSnackbar(\"Failed to load data\", \"error\");\n                    }\n                });\n        },\n        async selectChange() {\n            try {\n                this.reset();\n\n                let res = await this.getData(this.selectedCat);\n                if (res === 200)\n                    this.showSnackbar(\n                        `${this.selectedCat} data successfully loaded`,\n                        \"success\"\n                    );\n            } catch (err) {\n                this.showSnackbar(\"Something is going wrong\", \"error\");\n            }\n        },\n        getCatalogs() {\n            return new Promise((resolve, reject) => {\n                try {\n                    const self = this;\n\n                    Object.values(this.originalData).forEach(function(val) {\n                        Object.keys(val).forEach(function(cat) {\n                            self.catalogs.push(cat.toString());\n                            self.processedData[cat.toString()] = val[cat];\n                        });\n                    });\n\n                    // set catalog\n                    self.selectedCat = self.catalogs[0];\n\n                    resolve(200);\n                } catch (err) {\n                    reject(500);\n                }\n            });\n        },\n        getData(catalog) {\n            return new Promise((resolve, reject) => {\n                try {\n                    const self = this;\n\n                    Object.keys(self.processedData).forEach(function(cat) {\n                        if (cat === catalog) {\n                            self.processedData[cat].map((obj) => {\n                                let singleObj = {};\n                                for (let key in obj) {\n                                    if (obj[key].constructor.name === \"Array\") {\n                                        // @\n                                        // HEADERS\n                                        // @\n                                        self.setHeaders(key);\n                                        // @\n                                        // DATA\n                                        // @\n                                        singleObj[key] = obj[key][0];\n                                    } else if (\n                                        obj[key].constructor.name === \"Object\"\n                                    ) {\n                                        for (let subkey in obj[key]) {\n                                            // @\n                                            // HEADERS\n                                            // @\n                                            self.setHeaders(subkey);\n                                            // @\n                                            // DATA\n                                            // @\n                                            singleObj[subkey] =\n                                                obj[key][subkey];\n                                        }\n                                    }\n                                }\n                                self.data.push(singleObj);\n                            });\n                        }\n                    });\n\n                    resolve(200);\n                } catch (err) {\n                    reject(500);\n                }\n            });\n        },\n        setHeaders(key) {\n            if (\n                !this.containsObject(\n                    {\n                        text: this.capitalize(key),\n                        value: key,\n                    },\n                    this.headers\n                )\n            )\n                this.headers.push({\n                    text: this.capitalize(key),\n                    value: key,\n                });\n        },\n        reset() {\n            this.headers = [];\n            this.data = [];\n        },\n        showSnackbar(text, color) {\n            this.snackbar = true;\n            this.snackbarText = text;\n            this.snackbarColor = color;\n        },\n        capitalize(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        },\n        containsObject(obj, arr) {\n            let i;\n            for (i = 0; i < arr.length; i++) {\n                if (\n                    arr[i][\"text\"] === obj[\"text\"] &&\n                    arr[i][\"value\"] === obj[\"value\"]\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n    },\n};\n</script>\n<style scoped>\n.main-container {\n    height: 100%;\n}\n\n.table-card {\n    width: 100%;\n    overflow: auto;\n}\n.table-card-title {\n    margin-top: -2rem !important;\n}\n</style>\n"]}]}